#![allow(non_snake_case)]
mod lib;
use std::{env, process::exit};
use rand::{thread_rng, Rng};

use lib::{network::Network};
use crate::lib::activations::{SIGMOID, RELU, TANH};


// 0, 0  -> 0
// 1, 0  -> 1
// 0, 1  -> 1
// 1, 1  -> 0



fn main() {
    env::set_var("RUST_BACKTRACE", "1");

    let learnCount = 100;

    let mut inputs = vec![];
    let mut targets = vec![];
    let mut rng = thread_rng();
    for i in 0..learnCount {
        let x = (rng.gen::<f64>() * 6.0 + 0.0).round() as usize;
        let y = (rng.gen::<f64>() * 6.0 + 0.0).round() as usize;
        let mut rect = vec![vec![0.0; 7]; 7];
        rect[y][x] = 1.0;
        if y > 0 {rect[y-1][x] = 1.0;}
        if y < 6 {rect[y+1][x] = 1.0;}
        if x > 0 {rect[y][x-1] = 1.0;}
        if x < 6 {rect[y][x+1] = 1.0;}
        println!("{}:{}", x, y);
        for i in 0..7 {
            let mut ivec: Vec<usize> = rect[i].clone().into_iter().map(|v| ((v as f32).round()) as usize).collect();
            println!("{}:{} | {:?}", x, y, ivec);
        }
        let mut res = vec![];
        for i in 0..7 {
            res.append(&mut rect[i]);
        }
        println!("{}:{}({}) | {:?}", x, y, res.len(), res);
        if res.len() > 49 {
            panic!("Wrong length ({:?}) of input value:\n{:?}", res.len(), res);
        }
        
        inputs.push(res);
        targets.push(vec![(y as f64) * 0.1 + (x as f64) * 0.01]);
    }

                                
    let mut network = Network::new(
        vec![49, 98, 98, 49, 1], 
        0.4, 
        SIGMOID,
        // TANH,
        // RELU,
    );
    network.train(inputs.clone(), targets.clone(), 1000);
    for i in 0..inputs.len() {
        println!("C{:?} -> {:?}", targets[i], network.feedForward(inputs[i].clone()));
    }
}




    // let A1: Vec<f64> = vec![  
    //     0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,
    //     0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    //     1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0];
    // let A2: Vec<f64> = vec![  
    //     0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,
    //     0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    //     1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0];
    // let A3: Vec<f64> = vec![  
    //     0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,
    //     0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    //     1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    // let B1: Vec<f64> = vec![  
    //     1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0];
    // let B2: Vec<f64> = vec![  
    //     1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0];
    // let B3: Vec<f64> = vec![  
    //     1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0];

    
    // let inputs = vec![
    //     vec![0.0,  0.0],
    //     vec![1.0,  0.0],
    //     vec![0.0,  1.0],
    //     vec![1.0,  1.0],
    // ];


    // let P22: Vec<f64> = vec![  
    //     0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    // let P33: Vec<f64> = vec![  
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    // let P36: Vec<f64> = vec![  
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0];
    // let P66: Vec<f64> = vec![  
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0];
    // let P77: Vec<f64> = vec![  
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0];
    // let P11: Vec<f64> = vec![  
    //     1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];

    //     let P62: Vec<f64> = vec![  
    //         0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    //     let P44: Vec<f64> = vec![  
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    //     let P57: Vec<f64> = vec![  
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0];
    //     let P27: Vec<f64> = vec![  
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0];
    //     let P53: Vec<f64> = vec![  
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    //         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    //         1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0];